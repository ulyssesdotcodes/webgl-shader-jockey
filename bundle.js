(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Ulysses\\Development\\webgl-shader-jockey\\coffee\\Main.coffee":[function(require,module,exports){
window.SJ = {};

require('./Viewer.coffee');

SJ.Main = (function() {
  function Main(isVisualizer) {
    var canvas, getShader;
    this.startTime = Date.now();
    this.surface = {
      height: 1.0,
      width: 1.0
    };
    canvas = document.createElement("canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    document.body.appendChild(canvas);
    this.gl = canvas.getContext("experimental-webgl");
    this.buffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0]), this.gl.STATIC_DRAW);
    this.surface.buffer = this.gl.createBuffer();
    this.gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);
    this.gl.clearColor(0, 0, 0, 1);
    this.gl.enable(this.gl.DEPTH_TEST);
    getShader = function(name) {
      return Rx.DOM.Request.get('./shaders/' + name);
    };
    Rx.Observable.start((function(_this) {
      return function() {
        return _this.gl.createProgram();
      };
    })(this)).doOnNext((function(_this) {
      return function(program) {
        return _this.program = program;
      };
    })(this)).zip(getShader("simple.vert").map((function(_this) {
      return function(data) {
        return _this.createShader(_this.gl.VERTEX_SHADER, data.responseText);
      };
    })(this)), getShader("simple.frag").map((function(_this) {
      return function(data) {
        return _this.createShader(_this.gl.FRAGMENT_SHADER, data.responseText);
      };
    })(this)), function(program, vs, fs) {
      return {
        program: program,
        vs: vs,
        fs: fs
      };
    }).subscribe((function(_this) {
      return function(_arg) {
        var fs, program, vs;
        program = _arg.program, vs = _arg.vs, fs = _arg.fs;
        _this.gl.attachShader(program, vs);
        _this.gl.attachShader(program, fs);
        _this.gl.deleteShader(vs);
        _this.gl.deleteShader(fs);
        _this.gl.linkProgram(program);
        _this.gl.useProgram(program);
        _this.cacheUniformLocation(program, 'time');
        _this.vertexPosition = _this.gl.getAttribLocation(_this.program, "position");
        _this.gl.enableVertexAttribArray(_this.vertexPosition);
        return _this.animate();
      };
    })(this));
  }

  Main.prototype.cacheUniformLocation = function(program, label) {
    if (program.uniformsCache === void 0) {
      program.uniformsCache = {};
    }
    return program.uniformsCache[label] = this.gl.getUniformLocation(program, label);
  };

  Main.prototype.animate = function() {
    requestAnimationFrame((function(_this) {
      return function() {
        return _this.animate();
      };
    })(this));
    return this.render();
  };

  Main.prototype.createShader = function(type, text) {
    var shader;
    shader = this.gl.createShader(type);
    this.gl.shaderSource(shader, text);
    this.gl.compileShader(shader);
    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
      throw this.gl.getShaderInfoLog(shader);
    }
    return shader;
  };

  Main.prototype.createTarget = function(gl, width, height) {
    var target;
    this.gl = gl;
    target = {};
    target.framebuffer = this.gl.createFramebuffer();
    target.renderbuffer = this.gl.createRenderbuffer();
    target.texture = this.gl.createTexture();
    this.gl.bindTexture(this.gl.TEXTURE_2D, target.texture);
    this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, target.framebuffer);
    this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, target.texture, 0);
    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, target.renderbuffer);
    this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);
    this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, target.renderbuffer);
    this.gl.bindTexture(this.gl.TEXTURE_2D, null);
    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);
    return this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
  };

  Main.prototype.render = function() {
    this.gl.useProgram(this.program);
    this.gl.uniform1f(this.program.uniformsCache['time'], (Date.now() - this.startTime) / 1000.0);
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.gl.vertexAttribPointer(this.vertexPosition, 2, this.gl.FLOAT, false, 0, 0);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
    return this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
  };

  return Main;

})();



},{"./Viewer.coffee":"C:\\Users\\Ulysses\\Development\\webgl-shader-jockey\\coffee\\Viewer.coffee"}],"C:\\Users\\Ulysses\\Development\\webgl-shader-jockey\\coffee\\Viewer.coffee":[function(require,module,exports){
SJ.Viewer = (function() {
  function Viewer() {
    return;
  }

  return Viewer;

})();



},{}]},{},["C:\\Users\\Ulysses\\Development\\webgl-shader-jockey\\coffee\\Main.coffee"])
//# sourceMappingURL=data:application/json;base64,
